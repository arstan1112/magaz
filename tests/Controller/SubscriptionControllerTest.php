<?php


namespace App\Tests\Controller;


use App\Controller\SubscriptionController;
use App\Entity\User;
use App\Message\SubscribeToProduct;
use App\Repository\UserRepository;
use App\Stripe\PaymentGateway;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Stripe\Subscription;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\BrowserKit\Cookie;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Messenger\Envelope;
use Symfony\Component\Messenger\MessageBusInterface;
use Symfony\Component\Messenger\Transport\InMemoryTransport;
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;

class SubscriptionControllerTest extends WebTestCase
{
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testSubscribe()
    {
//        $stripeSubscription = new Subscription();
//
//        $mockManager = $this->createMock(EntityManagerInterface::class);
////        $mockManager
////            ->expects($this->once())
////            ->method('getRepository')
////            ->willReturn(UserRepository::class)
////        ;
////        $mockManager
////            ->expects($this->once())
////            ->method('find')
////        ;
//        $mockGateway = $this->createMock(PaymentGateway::class);
//        $mockGateway
//            ->expects($this->any())
//            ->method('subscribe')
//            ->willReturn($stripeSubscription)
//        ;
//        $mockLogger = $this->createMock(LoggerInterface::class);
//        $mockLogger
//            ->expects($this->exactly(2))
//            ->method('info')
//        ;
//
//        $subscriptionController = new SubscriptionController($mockManager, $mockGateway, $mockLogger);
//
//        $messengerMessage = new SubscribeToProduct($stripeSubscription, 4, 'user1@loc.loc');
//        $messengerEnvelope = new Envelope($messengerMessage);
//
//        $requestMock = $this->createMock(Request::class);
//        $requestMock
//            ->expects($this->once())
//            ->method('getContent')
//            ->willReturn('{"email":"user1@loc.loc","payment_method":"pm_1GOmMRCCGgik3dC7aTXYBp8g","pricing_plan":"plan_GgQebDnr5PqPVh"}')
//        ;
//
//        $busMock = $this->createMock(MessageBusInterface::class);
//        $busMock
//            ->expects($this->once())
//            ->method('dispatch')
//            ->with($messengerEnvelope)
//            ->willReturn(new Envelope($messengerMessage))
//        ;
//
//        $subscribe = $subscriptionController->subscribe($requestMock, $busMock);


//        $client = static::createClient();
        $client = $this->createAuthorizedClient();

        $client->request('POST', 'subscribe', [], [], [], '{"email":"user_test3@loc.loc","payment_method":"pm_1GQ8mUCCGgik3dC7AhvaoZHf","pricing_plan":"plan_GgQebDnr5PqPVh"}');
//        $client->request('POST', 'subscribe');

        /** @var InMemoryTransport $transport */
        $transport = self::$container->get('messenger.transport.async');
        $this->assertCount(1, $transport->get());
//        dd($transport);

        $this->assertEquals(3,3);
//        $this->assertResponseIsSuccessful();
//        $this->assertEquals(200, $client->getResponse()->getStatusCode());
    }

    protected function createAuthorizedClient()
    {
        $client = static::createClient();
        $container = $client->getContainer();
        $session = $container->get('session');
        $person = $container->get('doctrine')->getRepository(User::class)->find(4);

        $token = new UsernamePasswordToken($person, null, 'main', $person->getRoles());
        $session->set('_security_main', serialize($token));
        $session->save();

        $client->getCookieJar()->set(new Cookie($session->getName(), $session->getId()));

        return $client;
    }
}