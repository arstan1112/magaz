<?php

namespace App\Tests\Stripe;

use App\Stripe\PaymentGateway;
use PHPUnit\Framework\TestCase;
use Stripe\Exception\InvalidRequestException;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

class PaymentGatewayTest extends TestCase
{
    protected $mock;

    protected $gateway;

    protected $key = 'sk_test_Gw22NrsxU6aIlKApdYKsXgN700f1Ww1pAc';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->mock = $this->createMock(ParameterBagInterface::class);
        $this->mock
            ->expects($this->once())
            ->method('get')
            ->willReturn($this->key)
        ;
        $this->gateway = new PaymentGateway($this->mock);
    }

    public function testCancel()
    {
        $this->expectException(InvalidRequestException::class);
        $cancelled = $this->gateway->cancel('sub...');
        $this->assertInstanceOf('Stripe\Subscription', $cancelled);
    }

    public function testSubscribe()
    {
        $this->expectException(InvalidRequestException::class);
        $data = [
            'payment_method' => '',
            'email' => '',
            'pricing_plan' =>'',
        ];
        $subscribed = $this->gateway->subscribe($data);
        $this->assertInstanceOf('Stripe\Subscription', $subscribed);
    }

    public function testPay()
    {
        $intent = $this->gateway->pay();
        $this->assertArrayHasKey('amount', $intent);
        $this->assertArrayHasKey('currency', $intent);
    }
}
